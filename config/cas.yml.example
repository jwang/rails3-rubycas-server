#encoding: utf-8



# By default the login page will be available at the root path 
# (e.g. https://login.example.net/). The uri_path option lets you serve it from a 
# different path (e.g. https://login.example.net/cas).
uri_path: /cas



##### AUTHENTICATION ###########################################################

# Configure how username/passwords are validated.
#
# !!! YOU MUST CONFIGURE AT LEAST ONE OF THESE AUTHENTICATION METHODS !!!
#
# There are several built-in methods for authentication:
# SQL, ActiveDirectory, LDAP, and GoogleAccounts. If none of these work for you, 
# it is relatively easy to write your own custom Authenticator class (see below).
#
# === SQL Authentication =======================================================
#
# The simplest method is to validate against a SQL database. This assumes
# that all of your users are stored in a table that has a 'username' column
# and a 'password' column. When the user logs in, CAS connects to this database
# and looks for a matching username/password in the users table. If a matching
# username and password is found, authentication is successful.
# 
# Example:
#
authenticator:
  class: CASServer::Authenticators::SQL
  database:
    adapter: mysql2
    database: roodo_cas_development
    username:
    password:
    host: 
  user_table: users
  username_column: username
  password_column: password
#
# === SQL Authentication with extra_attributes ==================================
#
# When replying to a CAS client's validation request, the server will normally
# provide the client with the authenticated user's username. However it is
# possible for the server to provide the client with additional attributes.
# You can configure the SQL authenticator to provide data from additional
# columns in the users table by listing the names of the columns under the 
# 'extra_attributes' option. Note though that this functionality is experimental.
# It should work with RubyCAS-Client, but may or may not work with other CAS
# clients. 
#
# For example, with this configuration, the 'full_name' and 'access_level'
# columns will be provided to your CAS clients along with the username:
#
# Example:
#
#authenticator:
#  class: CASServer::Authenticators::SQL
#  database:
#    adapter: mysql2
#    database: some_database_with_users_table
#    username: 
#    password: 
#    host: 
#  user_table: users
#  username_column: username
#  password_column: password
#  extra_attributes: full_name, access_level
#
# === SQL Authentication with MD5 ==============================================
#
# authenticator:
#   class: CASServer::Authenticators::SQLMd5
#   database:
#     adapter: mysql2
#     database: some_database_with_users_table
#     username: 
#     password: 
#     host: 
#   user_table: users
#   username_column: username
#   password_column: password
#   extra_attributes: username, email, birthday
#
#
# The plain SQL authenticator expects user passwords to be stored as plain text in your SQL database. 
# This makes deploying the SQL authenticator easy, but poses an obvious security risk (not necessarily 
# for your CAS server, but certainly for your users should an intruder gain access to your user database).
# If this is a concern for you, consider using SQLEncrypted. This authenticator allows you to hook in an 
# arbitrary encryption function of your own.
#
# If you prefer to have your passwords stored in an encrypted form, have a 
# look at the SQLEncrypted authenticator: 
# http://code.google.com/p/rubycas-server/wiki/UsingTheSQLEncryptedAuthenticator
#
# If your users table stores passwords with MD5 hashing (for example as with
# Drupal) try using the SQLMd5 version of the SQL authenticator.
# Example:
#
# authenticator:
#   class: CASServer::Authenticators::SQLEncrypted
#   database:
#     adapter: mysql2
#     database: some_database_with_users_table
#     username: 
#     password: 
#     server: 
#   user_table: users
#   username_column: username
#   encrypt_function: 'user.encrypted_password == Digest::SHA1.hexdigest("#{user.encryption_salt}::#{@password}")'
#

##### LOOK & FEEL ##############################################################

# Set the path to the theme directory that determines how your CAS pages look. 
#
# Custom themes are not well supported yet, but will be in the near future. In 
# the meantime, if you want to create a custom theme, you can create a 
# subdirectory under the CASServer's themes dir (for example, 
# '/usr/lib/ruby/1.8/gems/casserver-xxx/public/themes', if you installed CASServer 
# on Linux as a gem). A theme is basically just a theme.css file that overrides 
# the themes/cas.css styles along with a collection of image files
# like logo.png and bg.png.
#
# By default, we use the 'simple' theme which you can find in themes/simple.
theme: simple

# The name of your company/organization. This will show up on the login page.
organization: JUT Living Development Co., Ltd

# A short bit of text that shows up on the login page. You can make this blank 
# if you prefer to have no extra text shown at the bottom of the login box.
#infoline: Powered by <a href="http://code.google.com/p/rubycas-server/">RubyCAS-Server</a>
infoline: Copyright Â© 2010, JUT Living Development Co., Ltd



##### LOGGING ##################################################################

# Configure general logging. This log is where you'll want to look in case of 
# problems.
#
# Set the level to DEBUG if you want more detailed logging.

log_level: DEBUG


##### SINGLE SIGN-OUT ##########################################################

# When a user logs in to a CAS-enabled client application, that application
# generally opens its own local user session. When the user then logs out
# through the CAS server, each of the CAS-enabled client applications need
# to be notified so that they can close their own local sessions for that user.
#
# Up until recently this was not possible within CAS. However, a method for
# performing this notification was recently added to the protocol (in CAS 3.1). 
# This works exactly as described above -- when the user logs out, the CAS 
# server individually contacts each client service and notifies it of the 
# logout. Currently not all client applications support this, so this
# behaviour is disabled by default. To enable it, uncomment the following
# configuration line. Note that currently it is not possible to enable
# or disable single-sign-out on a per-service basis, but this functionality
# is planned for a future release.

#enable_single_sign_out: true



##### OTHER ####################################################################

# You can set various ticket expiry times (specify the value in seconds).

# Unused login and service tickets become unusable this many seconds after
# they are created. (Defaults to 5 minutes)
maximum_unused_login_ticket_lifetime: 300
maximum_unused_service_ticket_lifetime: 300

# The server must periodically delete old tickets (login tickets, service tickets
# proxy-granting tickets, and ticket-granting tickets) to prevent buildup of
# stale data. This effectively limits the maximum length of a CAS session to
# the lifetime given here (in seconds). (Defaults to 48 hours)
# 
# Note that this limit is not enforced on the client side; it refers only to the
# the maximum lifetime of tickets on the CAS server.
maximum_session_lifetime: 172800

# This would provide an additional checkbox for user to
# indicate if (s)he want to be remembered on the browser. (Defaults to 14 dayss)
remember_me_session_lifetime: 1209600

# If you want the usernames entered on the login page to be automatically 
# downcased (converted to lowercase), enable the following option. When this 
# option is set to true, if the user enters "JSmith" as their username, the 
# system will automatically
# convert this to "jsmith".
downcase_username: true
